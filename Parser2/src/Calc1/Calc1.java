/* Generated By:JavaCC: Do not edit this line. Calc1.java */
package Calc1;

import java.util.HashMap;

public class Calc1 implements Calc1Constants {
  static HashMap<String, Double> symbolTable = new HashMap<String, Double>();

  public static void main(String args []) throws ParseException
  {
    Calc1 parser = new Calc1(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
      try
      {
        double result;
        result = Calc1.one_line();
        System.out.println("Result = " + result);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Calc1.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

//TOKEN :
//{
//  < #DIGIT : [ "0"-"9" ] >
//| < #INT : (< DIGIT >)+ >
//| < #REAL :
//    (< INT >)					 // 123
//  | ([ "." ] < INT >)		 // .123
//  | (< INT > [ "." ])			 // 123.
//  | (< INT > [ "." ] < INT >) > // 123.456
//| < #EXP : [ "E", "e" ] ([ "+", "-" ])? < INT > >
//| < #REAL_EXP : < REAL > (< EXP >)? >
//| < CONSTANT : (< REAL_EXP >) >
//}
  static final public double one_line() throws ParseException {
        double result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case IDENTIFIER:
    case CONSTANT:
    case 14:
      result = sum();
      jj_consume_token(13);
    // This is the action in java code
    {if (true) return result;} // return value 

      break;
    case 13:
      jj_consume_token(13);
     {if (true) return 0;} // return also a value

      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public double sum() throws ParseException {
  double result;
  double value;
  Token t;
    result = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = term();
      if (t.kind == PLUS)
        result += value;
      else
        result -= value;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public double term() throws ParseException {
  double result;
  double value;
  Token t;
    result = unary();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = unary();
      if (t.kind == MULTIPLY)
        result = result * value;
      else
        result = result / value;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public double unary() throws ParseException {
  double result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      result = element();
        {if (true) return -result;}
      break;
    case IDENTIFIER:
    case CONSTANT:
    case 14:
      result = element();
                {if (true) return result;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public double element() throws ParseException {
        Token t;
        //   System.out.println("I am processing element() non-terminal");
        double result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
          // System.out.println("Token constant =" + t.image);
          result = Double.parseDouble(t.image);
          {if (true) return result;}
      break;
    case 14:
      jj_consume_token(14);
      result = sum();
      jj_consume_token(15);
          // System.out.println("I've processed ( sum ) ");
          {if (true) return result;}
      break;
    case IDENTIFIER:
      result = function_or_variable();
          {if (true) return result;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public double function_or_variable() throws ParseException {
  double result;
  Token t;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      result = sum();
      jj_consume_token(15);
                if (t.image.equalsIgnoreCase("sin"))
                        {if (true) return Math.sin(result);}
                else if (t.image.equalsIgnoreCase("cos"))
                        {if (true) return Math.cos(result);}
                else if (t.image.equalsIgnoreCase("tan"))
                        {if (true) return Math.tan(result);}
                else if (t.image.equalsIgnoreCase("sqrt"))
                        {if (true) return Math.sqrt(result);}
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      result = sum();
                Double value = Calc1.symbolTable.get(t.image); // returns null if key is not stored

            if (value == null)
            {
                Calc1.symbolTable.put(t.image, result);
                System.out.println(t.image + " appends " + result);
                }
            else
                Calc1.symbolTable.replace(t.image, result);
            {if (true) return result;}
      break;
    default:
      jj_la1[7] = jj_gen;
            {if (true) return Calc1.symbolTable.get(t.image);}
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Calc1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6c40,0x60,0x60,0x180,0x180,0x4c40,0x4c00,0x4200,};
   }

  /** Constructor with InputStream. */
  public Calc1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calc1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Calc1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Calc1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Calc1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Calc1(Calc1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Calc1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
